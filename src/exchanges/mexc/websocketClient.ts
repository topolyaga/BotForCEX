import axios from 'axios';
import { createHmac } from 'crypto';
import WebSocket from 'ws';
import crypto from 'crypto';
import * as dotenv from 'dotenv';
import protobuf from './proto_bundle';
import Reader from 'protobufjs';
import { EventEmitter } from 'events';

export const Updates = new EventEmitter();

dotenv.config();

// üîê –¢–≤–æ–∏ –∫–ª—é—á–∏
const API_KEY = process.env.MEXC_API_KEY!;
const SECRET_KEY = process.env.MEXC_SECRET_KEY!;

const BASE_REST_URL = 'https://api.mexc.com';
const BASE_WS_URL = 'wss://wbs-api.mexc.com/ws';

// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å
async function getSignature(params: Record<string, string>): Promise<string> {
    const query = Object.keys(params)
      .sort()
      .map(key => `${key}=${params[key]}`)
      .join('&');
  
    return createHmac('sha256', SECRET_KEY).update(query).digest('hex');
  }


// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–∏—Å—Ç–µ–Ω –∫–ª—é—á–∏
async function getAllListenKey(): Promise<string> {
    console.log('–ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...');
    const timestamp = Date.now().toString();
    const params = { timestamp };
    const signature = await getSignature(params);

    try {
        const res = await axios.get(`${BASE_REST_URL}/api/v3/userDataStream`, {
            params: { ...params, signature },
            headers: {
                'X-MEXC-APIKEY': API_KEY,
                'Content-Type': 'application/json',
              }
        });
        console.log('‚úÖ —Å–ø–∏—Å–æ–∫ listenKey –ø–æ–ª—É—á–µ–Ω:', res.data.listenKey);
        return res.data.listenKey;
      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ listenKey:', error.message);
        throw error;
      }
}

// üßæ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ listenKey
async function getListenKey(): Promise<string> {
  console.log('üü° –ü–æ–ª—É—á–∞–µ–º listenKey —á–µ—Ä–µ–∑ REST API...');

  const timestamp = Date.now().toString();
  const params = { timestamp };
  const signature = await getSignature(params);

  try {
    const res = await axios.post(`${BASE_REST_URL}/api/v3/userDataStream`, null, {
        params: { ...params, signature },
        headers: {
          'X-MEXC-APIKEY': API_KEY,
          'Content-Type': 'application/json',
        }
    });
    console.log('‚úÖ listenKey –ø–æ–ª—É—á–µ–Ω:', res.data.listenKey);
    return res.data.listenKey;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ listenKey:', error.message);
    throw error;
  }
}

// üîÅ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ listenKey
async function keepAliveListenKey(listenKey: string): Promise<void> {
  try {
    const timestamp = Date.now().toString();
    const params = { listenKey, timestamp };
    const signature = await getSignature(params);

    await axios.put(`${BASE_REST_URL}/api/v3/userDataStream`, null, {
      params: { ...params, signature },
      headers: {
          'X-MEXC-APIKEY': API_KEY,
          'Content-Type': 'application/json',
        }
    });
    console.log('üîÑ listenKey —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω');
  } catch (error: any) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å listenKey:', error.response?.data || error.message);
  }
}

// üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
async function startWebSocket() {

  const listenKey = await getListenKey();
  const wsUrl = `${BASE_WS_URL}?listenKey=${listenKey}`;

  keepAliveListenKey(listenKey);
  
  console.log('üåê –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –ø–æ –∞–¥—Ä–µ—Å—É:', wsUrl);

  const ws = new WebSocket(wsUrl);

  const ping = {
    method: 'PING'
  };

  setInterval(() => {
    console.log('üèì PING ');
    ws.send(JSON.stringify(ping));
  }, 1000 * 58 * 1);

  
  ws.on('open', () => {
    console.log('‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ');

    const payload = {
      method: 'SUBSCRIPTION',
      params: ['spot@private.account.v3.api.pb'],
      id: Date.now(),
    };

    console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:', payload);
    ws.send(JSON.stringify(payload));
  });

  ws.on('message', (data: Buffer) => {

    let isJson = false;

    try {
        const json = JSON.parse(data.toString());
        if (json.msg === "PONG") {
            console.log('PONG üèì');
        } else {
            console.log('üßæ JSON-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', JSON.stringify(json, null, 2));
        };
        
        isJson = true;
    } catch (e){
        console.warn('‚ö†Ô∏è –ù–µ JSON -> –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ—Ç–æ–±–∞—Ñ:');
    }

    if (!isJson){
        // ‚úÖ –≠—Ç–æ protobuf, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
    
        const decoded = protobuf.PushDataV3ApiWrapper.decode(data);
        
        const balanceUpdate = decoded.privateAccount;
    
        if (balanceUpdate) {
            console.log('üì¨ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', JSON.stringify(balanceUpdate, null, 2));
        } else {
            console.log('üì¶ –ü—Ä–∏—à–ª–æ protobuf-—Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ø—Ä–æ –±–∞–ª–∞–Ω—Å. –ö–∞–Ω–∞–ª:', decoded.channel);
        }
    }

  });

  ws.on('close', () => {
    console.warn('‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫...');
    setTimeout(startWebSocket, 5000);
  });

  ws.on('error', (err) => {
    console.error('‚ùó WebSocket –æ—à–∏–±–∫–∞:', err.message);
  });

  // ‚è± –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º listenKey –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  setInterval(() => {
    console.log('üïê –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º listenKey...');
    keepAliveListenKey(listenKey);
  }, 1000 * 60 * 30);
}



// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
getAllListenKey();
startWebSocket().catch((e) => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ startWebSocket:', e.message);
});